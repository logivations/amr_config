### Navigation

controller_server:
  ros__parameters:
    speed_limit_topic: "speed_limit"
    odom_topic: odometry/filtered
    publish_feedback: False
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.1
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    goal_checker_plugins:
      [
          "general_goal_checker",
          "exact_path_goal_checker",
          "pallet_putdown_goal_checker",
          "pallet_pickup_goal_checker",
          "narrow_path_goal_checker",
          "narrow_path_putdown_goal_checker",
          "platform_putdown_goal_checker",
          "lane_goal_checker",
          "approach_charging_goal_checker",
          "approach_pre_charging_goal_checker",
      ]

    # large tolerance, so that we can either
    # - quickly switch back to lane driving
    # - quickly switch to exact_goal_reach mode to reach final goal
    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.3
      yaw_goal_tolerance: 0.4
      stateful: True

    # lower tolerance for reaching the final goal
    exact_path_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.12
      yaw_goal_tolerance: 0.04
      stateful: True

    # before the putdown, we want to reach the point as accurately as possible
    # even lower thresholds cannot be reached and lead to oscillation
    pallet_putdown_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.02
      yaw_goal_tolerance: 0.01
      stateful: True

    # no need to be too strict here, pallet pickup will be stopped by lidar anyway
    pallet_pickup_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.08
      yaw_goal_tolerance: 0.04
      stateful: True

    # in narrow paths, either we do a
    # - pickup -> reach goal somehow accurately, then scan pallet with fork cameras, then enter pallet
    # - putdown -> reach goal somehow accurately, then scan pallet, then go to more exact putdown goal
    narrow_path_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.14
      yaw_goal_tolerance: 0.08
      stateful: True

    # in narrow paths, either we do a
    # - pickup -> reach goal somehow accurately, then scan pallet with fork cameras, then enter pallet
    # - putdown -> reach goal somehow accurately, then scan pallet, then go to more exact putdown goal
    narrow_path_putdown_goal_checker:
      plugin: "nav2_controller::StoppedGoalChecker"
      xy_goal_tolerance: 0.04
      yaw_goal_tolerance: 0.025
      rot_stopped_velocity: 0.01
      trans_stopped_velocity: 0.01
      stateful: True

    # place exactly on platform
    platform_putdown_goal_checker:
      plugin: "nav2_controller::StoppedGoalChecker"
      xy_goal_tolerance: 0.02
      yaw_goal_tolerance: 0.01
      rot_stopped_velocity: 0.01
      trans_stopped_velocity: 0.01
      stateful: True

    # the final goal is reached with general_goal_checker + exact goal reach checker
    # accepts the goal at any angle.
    # After this step, there is always a free navigation step that will then directly go to the final goal, including the orientation.
    # So, there is no point in reaching the orientation of the lane goal - on the contrary,
    # sometimes that goal with have a different orientation to the final goal so it consumes extra time to reach it.
    lane_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 1.0
      # any angle is valid (max difference can be pi)
      yaw_goal_tolerance: 3.15
      stateful: True

    # needs to be reached precisely, so that we can dock
    approach_charging_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.02
      yaw_goal_tolerance: 0.02
      stateful: True

    # less precision needed than above, as we still correct
    # however, some precision is needed, to ensure that front cam can see the charging station
    approach_pre_charging_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.07
      yaw_goal_tolerance: 0.04
      stateful: True

    progress_checker_plugin: "progress_checker"
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1
      # the stall timeout of the traction motor is 10 seconds. Stop in less time to not trigger a stall error
      movement_time_allowance: 7.0

    controller_plugins:
      [
        "GeneralFollowPath",
        "PalletPickupFollowPath",
        "PalletPutDownFollowPath",
        "LaneFollowPath",
        "NarrowFollowPath",
        "ExactGoalReachFollowPath",
        "ApproachChargingStation",
        "ApproachPreChargingGoal2",
      ]

    # Remark: Yaml Anchors and aliases are not supported by rcl https://github.com/ros2/rcl/issues/563. RewrittenYaml seems to workaround this limitation by using directly the yaml library
    GeneralFollowPath: &GeneralFollowPath
      publish_feedback: False
      plugin: "teb_local_planner::TebLocalPlannerROS"
      dt_ref: 0.3
      dt_hysteresis: 0.1
      global_plan_overwrite_orientation: False
      feasibility_check_no_poses: 22
      global_plan_viapoint_sep: 0.4
      allow_init_with_backwards_motion: True
      max_global_plan_lookahead_dist: 4.0

      # Custom added parameters
      feasibility_check_stop_poses: 15
      feasibility_check: True
      feasibility_check_lookahead_distance: 2.7

      # Robot
      footprint_model:
        type: "line"
        line_end: [1.6, 0.0]
        line_start: [0.1, 0.0]
      max_vel_x: 0.7
      max_vel_x_backwards: 0.5
      max_vel_theta: 0.4
      acc_lim_x: 0.4
      acc_lim_theta: 0.4
      use_proportional_saturation: True
      min_turning_radius: 0.3

      # Obstacles
      min_obstacle_dist: 0.6
      inflation_dist: 1.3
      obstacle_poses_affected: 20

      include_dynamic_obstacles: False
      include_costmap_obstacles: False
      costmap_converter_plugin: ""
      costmap_converter_spin_thread: False
      costmap_converter_rate: 1

      obstacle_association_force_inclusion_factor: 1.0
      costmap_obstacles_behind_robot_dist: 1.0
      obstacle_proximity_ratio_max_vel: 1.0
      obstacle_proximity_lower_bound: 0.0
      obstacle_proximity_upper_bound: 1.0

      # Trajectory
      control_look_ahead_poses: 4

      # Optimization

      weight_inflation: 0.3
      optimization_verbose: False
      weight_viapoint: 0.3
      no_inner_iterations: 5
      no_outer_iterations: 4
      weight_velocity_obstacle_ratio: 0.0
      weight_obstacle: 50.0
      weight_kinematics_forward_drive: 0.3

      # Homotopy Class Planner
      enable_homotopy_class_planning: True
      enable_multithreading: True
      max_number_classes: 3

      # GoalTolerance
      free_goal_vel: true

    NarrowFollowPath:
      <<: *GeneralFollowPath
      footprint_model:
        type: "polygon"
        vertices: "[ [2.0, -0.3], [2.0, 0.3], [-0.43, 0.3], [-0.43, -0.3] ]"
      min_obstacle_dist: 0.2
      inflation_dist: 0.4
      weight_inflation: 0.4
      control_look_ahead_poses: 3
      max_global_plan_lookahead_dist: 3.5
      max_vel_x: 0.3
      max_vel_x_backwards: 0.3
      max_vel_theta: 0.2
      acc_lim_x: 0.2
      acc_lim_theta: 0.2
      weight_viapoint: 0.1
      max_number_classes: 1
      enable_homotopy_class_planning: False
      obstacle_poses_affected: 30
      free_goal_vel: False
      feasibility_check: False

    ExactGoalReachFollowPath:
      <<: *GeneralFollowPath
      footprint_model:
        type: "line"
        line_end: [1.6, 0.0]
        line_start: [0.1, 0.0]
      min_obstacle_dist: 0.47
      inflation_dist: 0.5
      control_look_ahead_poses: 2
      max_global_plan_lookahead_dist: 1.0
      max_vel_x: 0.6
      max_vel_x_backwards: 0.3
      weight_viapoint: 0.1
      free_goal_vel: false

    PalletPutDownFollowPath:
      <<: *GeneralFollowPath
      footprint_model:
        type: "polygon"
        vertices: "[ [2.0, -0.3], [2.0, 0.3], [-0.43, 0.3], [-0.43, -0.3] ]"
      min_obstacle_dist: 0.2
      inflation_dist: 0.4
      weight_inflation: 0.4
      max_global_plan_lookahead_dist: 3.5
      feasibility_check: False
      max_vel_x: 0.1
      max_vel_x_backwards: 0.1
      free_goal_vel: false
      max_vel_theta: 0.07
      weight_kinematics_nh: 10000.0
      weight_kinematics_forward_drive: 2.0
      acc_lim_x: 0.06
      acc_lim_theta: 0.08
      penalty_epsilon: 0.05
      weight_viapoint: 0.1
      max_number_classes: 4
      min_turning_radius: 1.0
      obstacle_poses_affected: 30

    PalletPickupFollowPath:
      <<: *GeneralFollowPath
      footprint_model:
        type: "polygon"
        vertices: "[ [2.0,-0.35], [2.0, 0.35], [-0.43,0.35], [-0.43,-0.35] ]"
      min_obstacle_dist: 0.13
      inflation_dist: 0.18
      weight_inflation: 0.2
      # decrease penalty epsilon, as everything is close and small here
      penalty_epsilon: 0.05
      control_look_ahead_poses: 2
      max_vel_x: 0.4
      max_vel_x_backwards: 0.5
      # ensures that these edges are disabled, they will slow us down inside the pallet
      weight_velocity_obstacle_ratio: 0.0
      weight_viapoint: 0.1
      no_inner_iterations: 4
      no_outer_iterations: 2
      # we don't need to choose between different TEBs here, so we can use a small number of homotopy classes
      max_number_classes: 2
      # the lidar will stop us, no need to slow down before the goal
      free_goal_vel: True
      feasibility_check: False

    LaneFollowPath:
      <<: *GeneralFollowPath
      footprint_model:
        type: "line"
        line_end: [1.6, 0.0]
        line_start: [0.1, 0.0]
      min_obstacle_dist: 0.65
      inflation_dist: 1.2
      control_look_ahead_poses: 4
      max_global_plan_lookahead_dist: 4.0
      obstacle_poses_affected: 12
      max_vel_x: 1.6
      acc_lim_x: 0.5
      weight_inflation: 0.3
      acc_lim_theta: 0.3
      max_vel_theta: 0.5
      max_number_classes: 1
      weight_viapoint: 0.3
      max_vel_x_backwards: 0.3
      divergence_detection_enable: True
      divergence_detection_max_chi_squared: 900

    ApproachChargingStation:
      <<: *GeneralFollowPath
      footprint_model:
        type: "polygon"
        vertices: "[ [1.51,-0.3], [1.51, 0.3], [-0.35, 0.3], [-0.35, -0.3] ] "
      min_obstacle_dist: 0.13
      inflation_dist: 0.18
      control_look_ahead_poses: 1
      max_vel_x: 0.03
      penalty_epsilon: 0.025
      max_vel_x_backwards: 0.1
      max_vel_theta: 0.05
      acc_lim_x: 0.05
      acc_lim_theta: 0.05
      weight_viapoint: 0.1
      free_goal_vel: false
      feasibility_check: False

    ApproachPreChargingGoal2:
      <<: *GeneralFollowPath
      footprint_model:
        type: "polygon"
        vertices: "[ [1.8, -0.3], [1.8, 0.3], [-0.43, 0.3], [-0.43, -0.3] ]"
      min_obstacle_dist: 0.15
      inflation_dist: 0.4
      control_look_ahead_poses: 2
      max_global_plan_lookahead_dist: 2.5
      max_vel_x: 0.2
      max_vel_x_backwards: 0.2
      max_vel_theta: 0.15
      acc_lim_x: 0.11
      acc_lim_theta: 0.2
      weight_viapoint: 0.1
      free_goal_vel: false
      feasibility_check: False

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["backup", "wait", "spin"]
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    spin:
      plugin: "nav2_recoveries/Spin"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: False
    simulate_ahead_time: 3.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

execute_goal:
  ros__parameters:
    use_sim_time: False
    default_server_timeout: 5000
    groot_zmq_publisher_port: 1668
    groot_zmq_server_port: 1669
    enable_groot_monitoring: True
    plugin_lib_names:
    # Default Plugins
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    # Custom plugins
    - adjust_pallet_goal_action_bt_node
    - narrow_pre_approach_action_bt_node
    - compute_pre_charging_goals_action_bt_node
    - get_charging_goal_from_marker_action_bt_node
    - get_pallet_position_from_depth_cameras_action_bt_node
    - get_goal_from_pallet_position_action_bt_node
    - set_lift_level_action_bt_node
    - get_amr_position_action_bt_node
    - get_putdown_goal_action_bt_node
    - compute_waypoints_to_pose_action_bt_node
    - compute_path_along_waypoints_action_bt_node
    - find_free_goal_on_path_action_bt_node
    - assign_bin_to_amr_action_bt_node
    - goal_action_condition_bt_node
    - set_lidar_field_action_bt_node
    - create_bin_exit_goal_action_bt_node
    - create_approach_goal_action_bt_node
    - check_path_for_vehicles_action_bt_node
    - check_on_single_lane_paths_action_bt_node
    - check_zone_for_big_loaders_action_bt_node
    - check_docking_pose_action_bt_node
    - create_locally_feasible_putdown_goal_action_bt_node
    - call_empty_service_bt_node
    - call_trigger_service_bt_node
    - call_bool_service_bt_node
    - set_node_parameters_bt_node
    - is_lidar_triggered_condition_bt_node
    - rack_locked_condition_bt_node
    - move_goal_towards_other_goal_condition_bt_node
    - is_forklift_load_detected_condition_bt_node
    - is_charging_action_condition_bt_node
    - is_bypass_allowed_condition_bt_node
    - verify_bin_state_action_bt_node
    - barcode_scanning_success_condition_bt_node
    - check_bin_type_condition_bt_node
    - ensure_distance_without_camera_less_than_bt_node
    - verify_amr_no_go_area_action_bt_node
    - straight_line_path_to_goal_bt_node
    - keep_trying_node_bt_node
    - notify_of_failure_bt_node
    - check_footprint_collision_condition_bt_node
    - amr_navigate_to_pose_action_bt_node
    - create_waiting_area_goal_action_bt_node
    - wakeup_amr_action_bt_node
    - w2mo_notification_action_bt_node
    - set_obstacles_bt_node

amr_navigate_to_pose:
  ros__parameters:
    use_sim_time: False
    default_server_timeout: 5000
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    enable_groot_monitoring: True
    plugin_lib_names:
    # Default Plugins
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    # Custom plugins
    - adjust_pallet_goal_action_bt_node
    - narrow_pre_approach_action_bt_node
    - compute_pre_charging_goals_action_bt_node
    - get_charging_goal_from_marker_action_bt_node
    - get_pallet_position_from_depth_cameras_action_bt_node
    - get_goal_from_pallet_position_action_bt_node
    - set_lift_level_action_bt_node
    - get_amr_position_action_bt_node
    - get_putdown_goal_action_bt_node
    - compute_waypoints_to_pose_action_bt_node
    - compute_path_along_waypoints_action_bt_node
    - find_free_goal_on_path_action_bt_node
    - assign_bin_to_amr_action_bt_node
    - goal_action_condition_bt_node
    - set_lidar_field_action_bt_node
    - create_bin_exit_goal_action_bt_node
    - create_approach_goal_action_bt_node
    - check_path_for_vehicles_action_bt_node
    - check_on_single_lane_paths_action_bt_node
    - check_zone_for_big_loaders_action_bt_node
    - check_docking_pose_action_bt_node
    - create_locally_feasible_putdown_goal_action_bt_node
    - call_empty_service_bt_node
    - call_trigger_service_bt_node
    - call_bool_service_bt_node
    - set_node_parameters_bt_node
    - is_lidar_triggered_condition_bt_node
    - rack_locked_condition_bt_node
    - move_goal_towards_other_goal_condition_bt_node
    - is_forklift_load_detected_condition_bt_node
    - is_charging_action_condition_bt_node
    - is_bypass_allowed_condition_bt_node
    - verify_bin_state_action_bt_node
    - barcode_scanning_success_condition_bt_node
    - check_bin_type_condition_bt_node
    - ensure_distance_without_camera_less_than_bt_node
    - verify_amr_no_go_area_action_bt_node
    - straight_line_path_to_goal_bt_node
    - keep_trying_node_bt_node
    - notify_of_failure_bt_node
    - check_footprint_collision_condition_bt_node
    - amr_navigate_to_pose_action_bt_node
    - wakeup_amr_action_bt_node
    - w2mo_notification_action_bt_node
    - set_obstacles_bt_node
    - create_goal_action_bt_node
    - create_platform_putdown_goal_action_bt_node

planner_server:
  ros__parameters:
    expected_planner_frequency: 1.0
    use_sim_time: False
    planner_plugins: ["SmacPlannerHybrid"]
    SmacPlannerHybrid:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      downsample_costmap: false # whether or not to downsample the map
      downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false # allow traveling in unknown space
      max_iterations: 100000 # maximum total iterations to search for before failing
      max_on_approach_iterations: 1000 # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      max_planning_time_ms: 2000.0 # max time in ms for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      smooth_path: false # Whether to smooth searched path TODO check if it works now
      motion_model_for_search: "REEDS_SHEPP" # 2D Moore, Von Neumann; SE2 Dubin, Redds-Shepp
      angle_quantization_bins: 64 # For SE2 node: Number of angle bins for search, must be 1 for 2D node (no angle search)
      minimum_turning_radius: 0.25 # For SE2 node & smoother: minimum turning radius in m of path / vehicle
      analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      reverse_penalty: 2.1                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.15                # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.50          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 1.7                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.

      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1e-10

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 0.15
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      footprint: "[[1.81, 0.5], [1.81, -0.5], [-0.5, -0.5], [-0.5, 0.5]]"
      track_unknown_space: false
      plugins: ["static_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        subscribe_to_updates: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0
        inflation_radius: 3.0
      # RViz2 does not correctly visualize update topics. So, we publish the full map at a very low frequency.
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 4.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: True
      width: 10
      height: 10
      resolution: 0.02
      footprint: "[[1.485, 0.5], [1.485, -0.5], [-0.35, -0.5], [-0.35, 0.5]]"
      always_send_full_costmap: True
      plugins: ["stvl_layer"]
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
        enabled: true
        voxel_decay: 45.
        decay_model: 0
        voxel_size: 0.02
        track_unknown_space: false
        unknown_threshold: 7
        mark_threshold: 1
        update_footprint_enabled: true
        combination_method: 1
        origin_z: 0.0
        publish_voxel_map: true
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 120.0
        observation_sources: pointcloud_kinect_dk_mark pointcloud_kinect_dk_clear pointcloud_left_mark pointcloud_left_clear pointcloud_right_mark pointcloud_right_clear
        pointcloud_kinect_dk_mark:
          data_type: PointCloud2
          topic: /points2/filtered
          marking: true
          clearing: false
          obstacle_range: 3.0
          min_obstacle_height: 0.05
          max_obstacle_height: 0.7
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 5
          clear_after_reading: true
        pointcloud_kinect_dk_clear:
          data_type: PointCloud2
          topic: /points2/filtered
          marking: false
          clearing: true
          max_z: 15.0   # with lower values, kinect obstacles might not get cleaned correctly.
          min_z: 0.1
          decay_acceleration: 4.0
          vertical_fov_angle: 1.565
          horizontal_fov_angle: 1.585
        pointcloud_left_mark:
          data_type: PointCloud2
          topic: /realsense_left/depth/color/points
          marking: true
          clearing: false
          obstacle_range: 3.0
          min_obstacle_height: 0.04
          max_obstacle_height: 1.0
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 5
          clear_after_reading: true
        pointcloud_left_clear:
          data_type: PointCloud2
          topic: /realsense_left/depth/color/points
          marking: false
          clearing: true
          max_z: 13.0
          min_z: 0.2
          decay_acceleration: 3.0
          vertical_fov_angle: 0.8
          horizontal_fov_angle: 1.08
        pointcloud_right_mark:
          data_type: PointCloud2
          topic: /realsense_right/depth/color/points
          marking: true
          clearing: false
          obstacle_range: 3.0
          min_obstacle_height: 0.04
          max_obstacle_height: 1.0
          inf_is_valid: false
          filter: "voxel"
          voxel_min_points: 5
          clear_after_reading: true
        pointcloud_right_clear:
          data_type: PointCloud2
          topic: /realsense_right/depth/color/points
          marking: false
          clearing: true
          max_z: 13.0
          min_z: 0.2
          decay_acceleration: 3.0
          vertical_fov_angle: 0.8
          horizontal_fov_angle: 1.08
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

### Bags

/**:
  ros__parameters:
    topics: [ # Without leading slash (/) if it is to be prepended with namespace
      "global_costmap/costmap",
      "global_plan",
      "local_costmap/costmap",
      "local_costmap/published_footprint",
      "local_costmap/voxel_grid",
      "action_server_error_message",
      "obstacles_markers",
      "teb_markers",
      "teb_poses",
      "tf",
      "tf_static",
      "create_feasible_putdown_goal",
      "joint_states",
      "cmd_vel",
      "cmd_vel_smoothed",
      "tricycle_controller/cmd_ackermann",
      "speed_limit",
      "speed_limit_close_vehicle",
      "speed_limit_w2mo_path",
      "odometry/filtered",
      "load_sensor_status",
      "diagnostics",
      "bt_logs_publisher/behavior_tree_log",
      "/clock",
      "/rosout",
      "lidar_field",
     # uncomment when fork camera feed in rosbag is needed
     #points2/filtered
     #realsense_right/color/image_raw
     #realsense_left/color/image_raw
    ]
    bags_dir: "/data/rosbags" # Without last slash (/). If changed also change /code/deep_cv/docker/rosbags
    max_duration: 400
    upload_enabled: True
    storage_format: mcap
